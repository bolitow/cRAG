# example_ingestion_usage.py
"""
Exemple d'utilisation du syst√®me d'ingestion avec le pipeline CRAG.

Ce script montre comment :
1. Parser diff√©rents types de documents
2. Les enrichir avec les m√©tadonn√©es de s√©curit√©
3. Les int√©grer dans le pipeline CRAG pour r√©pondre aux questions
"""

import sys
from pathlib import Path
from datetime import datetime

# Ajouter le chemin src au PYTHONPATH
sys.path.append('src')

# Imports du syst√®me d'ingestion
from src.ingestion import DocumentParser, SecurityPreprocessor, MetadataExtractor

# Imports du pipeline CRAG
from src.pipeline.crag_pipeline import CRAGPipeline
from src.grading.knowledge_stripper import KnowledgeStripper
from src.grading.domain_patterns import CyberSecurityPatterns


def setup_ingestion_system():
    """
    Configure le syst√®me d'ingestion avec tous ses composants.
    """
    print("üîß Configuration du syst√®me d'ingestion...")

    # Configuration du parser principal
    parser_config = {
        'cache_enabled': True,
        'cache_dir': '.document_cache',
        'parallel_processing': True,
        'max_workers': 4,
        'file_size_limit': 50,  # MB
        'parser_configs': {
            'pdf': {
                'ocr_enabled': False,
                'extract_tables': True,
                'remove_headers': True
            },
            'excel': {
                'skip_empty_sheets': True,
                'detect_tables': True
            },
            'markdown': {
                'extract_front_matter': True,
                'extract_links': True
            },
            'faq': {
                'extract_categories': True,
                'language': 'fr'
            }
        }
    }

    # Cr√©er le parser
    document_parser = DocumentParser(parser_config)

    # Configuration du pr√©processeur de s√©curit√©
    security_config = {
        'extract_dates': True,
        'normalize_terms': True,
        'enrich_metadata': True,
        'detect_references': True,
        'language': 'fr'
    }

    security_preprocessor = SecurityPreprocessor(security_config)

    # Configuration de l'extracteur de m√©tadonn√©es
    metadata_config = {
        'organization_name': 'MonEntreprise',
        'default_classification': 'Internal',
        'extract_pii': True,
        'validate_references': True,
        'quality_checks': True
    }

    metadata_extractor = MetadataExtractor(metadata_config)

    print("‚úÖ Syst√®me d'ingestion configur√©")

    return document_parser, security_preprocessor, metadata_extractor


def process_security_documents(directory_path: str):
    """
    Traite un r√©pertoire de documents de s√©curit√©.
    """
    # Initialiser le syst√®me
    document_parser, security_preprocessor, metadata_extractor = setup_ingestion_system()

    print(f"\nüìÅ Traitement du r√©pertoire : {directory_path}")

    # Parser tous les documents du r√©pertoire
    try:
        parsed_documents = document_parser.parse_directory(
            directory_path,
            recursive=True,
            file_patterns=['*.pdf', '*.md', '*.xlsx', '*.txt'],
            exclude_patterns=['*_draft.*', 'temp/*', '.*']
        )

        print(f"\n‚úÖ {len(parsed_documents)} documents pars√©s avec succ√®s")

    except Exception as e:
        print(f"‚ùå Erreur lors du parsing : {e}")
        return []

    # Pr√©processer chaque document
    enriched_documents = []

    print("\nüîÑ Enrichissement des documents...")

    for doc in parsed_documents:
        try:
            # Extraire les m√©tadonn√©es
            doc_metadata = metadata_extractor.extract_metadata(doc)

            # Appliquer le preprocessing de s√©curit√©
            enriched_doc = security_preprocessor.preprocess(doc)

            enriched_documents.append(enriched_doc)

            # Afficher un r√©sum√©
            print(f"\nüìÑ {doc.metadata.get('file_name', 'Unknown')}:")
            print(f"   - Type : {doc.doc_type}")
            print(f"   - Classification : {doc_metadata.classification_level}")
            print(f"   - Frameworks : {', '.join(enriched_doc.metadata['security_context']['compliance_frameworks'])}")
            print(f"   - Domaines : {', '.join(enriched_doc.metadata['security_context']['security_domains'][:3])}")
            print(f"   - Score qualit√© : {doc_metadata.completeness_score:.2f}")

        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur lors de l'enrichissement de {doc.metadata.get('file_name', 'Unknown')}: {e}")

    return enriched_documents


def integrate_with_crag_pipeline(enriched_documents):
    """
    Int√®gre les documents enrichis dans le pipeline CRAG.
    """
    print("\nüöÄ Int√©gration dans le pipeline CRAG...")

    # Cr√©er un Knowledge Stripper adapt√© √† la cybers√©curit√©
    stripper = KnowledgeStripper(language='fr')

    # Cr√©er le pipeline CRAG
    pipeline = CRAGPipeline(
        stripper=stripper,
        verbose=True
    )

    # Convertir les documents enrichis en format pour le pipeline
    documents_for_indexing = []
    metadata_for_indexing = []

    for doc in enriched_documents:
        # Le contenu principal
        documents_for_indexing.append(doc.content)

        # Les m√©tadonn√©es enrichies
        doc_metadata = {
            'source': doc.source_path,
            'doc_type': doc.doc_type,
            'security_doc_type': doc.metadata.get('security_doc_type', 'general'),
            'classification': doc.metadata.get('extracted_metadata', {}).get('classification', 'Internal'),
            'compliance_frameworks': doc.metadata.get('security_context', {}).get('compliance_frameworks', []),
            'security_domains': doc.metadata.get('security_context', {}).get('security_domains', []),
            'importance_score': doc.metadata.get('importance_score', 5),
            'is_critical': doc.metadata.get('is_critical_security_doc', False),
            'systems_affected': doc.metadata.get('extracted_metadata', {}).get('systems_affected', []),
            'last_updated': doc.metadata.get('extracted_metadata', {}).get('last_modified', '')
        }

        metadata_for_indexing.append(doc_metadata)

    # Indexer les documents
    print(f"\nüìö Indexation de {len(documents_for_indexing)} documents enrichis...")
    pipeline.index_documents(documents_for_indexing, metadata_for_indexing)

    print("‚úÖ Documents index√©s dans le pipeline CRAG")

    return pipeline


def demo_audit_queries(pipeline):
    """
    D√©montre l'utilisation du pipeline pour r√©pondre √† des questions d'audit.
    """
    print("\n" + "=" * 80)
    print("üéØ D√âMONSTRATION : R√©ponses aux questions d'audit")
    print("=" * 80)

    # Questions d'audit typiques
    audit_questions = [
        {
            'question': "Quelle est notre politique de gestion des mots de passe ?",
            'context': "Audit ISO 27001 - A.9.4.3"
        },
        {
            'question': "Comment g√©rons-nous les sauvegardes des donn√©es critiques ?",
            'context': "Audit de continuit√© d'activit√©"
        },
        {
            'question': "Quels sont nos contr√¥les pour la s√©curit√© r√©seau ?",
            'context': "Audit technique infrastructure"
        },
        {
            'question': "Comment assurons-nous la conformit√© RGPD ?",
            'context': "Audit de protection des donn√©es"
        },
        {
            'question': "Quelle est la proc√©dure en cas d'incident de s√©curit√© ?",
            'context': "Test du plan de r√©ponse aux incidents"
        }
    ]

    for qa in audit_questions:
        print(f"\n{'=' * 60}")
        print(f"‚ùì QUESTION D'AUDIT : {qa['question']}")
        print(f"üìã Contexte : {qa['context']}")
        print(f"{'=' * 60}")

        # Traiter la question
        result = pipeline.process_query(qa['question'])

        # Afficher la r√©ponse
        print(f"\nüìù R√âPONSE :")
        print("-" * 60)
        print(result.answer)
        print("-" * 60)

        # Afficher les m√©tadonn√©es
        print(f"\nüìä M√âTADONN√âES :")
        print(f"- Confiance : {result.confidence:.2%}")
        print(f"- Documents sources : {result.steps_details.get('retrieval', {}).get('docs_retrieved', 0)}")
        print(f"- Besoin d'infos suppl√©mentaires : {'Oui' if result.needs_more_info else 'Non'}")

        # Pause entre les questions
        input("\n>>> Appuyez sur Entr√©e pour la question suivante...")


def generate_audit_report(pipeline, output_path: str = "rapport_audit_crag.md"):
    """
    G√©n√®re un rapport d'audit bas√© sur les documents index√©s.
    """
    print(f"\nüìä G√©n√©ration du rapport d'audit...")

    report_content = f"""# Rapport d'Audit - Syst√®me CRAG
Date : {datetime.now().strftime('%d/%m/%Y %H:%M')}

## 1. Vue d'ensemble du syst√®me documentaire

### Documents analys√©s
- Total : {pipeline.retriever.vector_store.index.ntotal} documents index√©s
- Types : Politiques, Proc√©dures, Standards, FAQ

### Couverture des domaines de s√©curit√©
Les documents couvrent les domaines suivants :
- Gestion des acc√®s et identit√©s
- S√©curit√© r√©seau
- Gestion des incidents
- Continuit√© d'activit√©
- Protection des donn√©es
- Gouvernance et conformit√©

## 2. Conformit√© aux frameworks

### ISO 27001/27002
- Couverture des contr√¥les : √Ä analyser
- Documents de r√©f√©rence : Politiques et proc√©dures identifi√©es

### RGPD
- Documentation privacy : Pr√©sente
- Proc√©dures de gestion des donn√©es : Document√©es

## 3. Points d'attention

### Documents critiques
- Tous les documents de politique sont classifi√©s correctement
- Les proc√©dures d'urgence sont √† jour
- Les matrices de contr√¥le sont maintenues

### Recommandations
1. Maintenir √† jour le registre des documents
2. R√©viser annuellement toutes les politiques
3. Tester r√©guli√®rement les proc√©dures d'incident

## 4. Capacit√©s du syst√®me CRAG

Le syst√®me est maintenant capable de :
- ‚úÖ R√©pondre aux questions d'audit avec des sources document√©es
- ‚úÖ Identifier les documents pertinents pour chaque contr√¥le
- ‚úÖ Croiser les r√©f√©rences entre documents
- ‚úÖ D√©tecter les incoh√©rences potentielles
- ‚úÖ Fournir des r√©ponses contextualis√©es selon le framework

---
*Rapport g√©n√©r√© automatiquement par le syst√®me CRAG*
"""

    # Sauvegarder le rapport
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(report_content)

    print(f"‚úÖ Rapport sauvegard√© : {output_path}")


def main():
    """
    Point d'entr√©e principal du script de d√©monstration.
    """
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë          SYST√àME CRAG - INGESTION DE DOCUMENTS               ‚ïë
    ‚ïë                  CYBERS√âCURIT√â & CONFORMIT√â                  ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

    # D√©finir le r√©pertoire de documents √† traiter
    # CHANGEZ CE CHEMIN selon votre structure
    documents_directory = "./documents_securite"

    # V√©rifier que le r√©pertoire existe
    if not Path(documents_directory).exists():
        print(f"‚ö†Ô∏è  Cr√©ez le r√©pertoire '{documents_directory}' et ajoutez vos documents :")
        print("   - Politiques de s√©curit√© (PDF)")
        print("   - Proc√©dures (Markdown)")
        print("   - Matrices de contr√¥le (Excel)")
        print("   - FAQ s√©curit√© (TXT/HTML)")

        # Cr√©er un r√©pertoire d'exemple
        Path(documents_directory).mkdir(exist_ok=True)

        # Cr√©er un document d'exemple
        exemple_politique = """# Politique de S√©curit√© des Mots de Passe

**Classification** : Interne  
**Version** : 2.1  
**Date** : 15/01/2024  
**Propri√©taire** : RSSI  

## 1. Objectif

Cette politique d√©finit les exigences de s√©curit√© pour la cr√©ation et la gestion des mots de passe au sein de l'organisation, conform√©ment √† la norme ISO 27001 A.9.4.3.

## 2. Exigences

### 2.1 Complexit√© des mots de passe

Tous les mots de passe DOIVENT respecter les crit√®res suivants :
- Longueur minimale : 12 caract√®res
- Contenir au moins : 1 majuscule, 1 minuscule, 1 chiffre, 1 caract√®re sp√©cial
- Ne pas contenir de mots du dictionnaire
- Ne pas contenir d'informations personnelles

### 2.2 Rotation des mots de passe

- Les mots de passe DOIVENT √™tre chang√©s tous les 90 jours
- Les 12 derniers mots de passe ne peuvent pas √™tre r√©utilis√©s
- Un changement imm√©diat est requis en cas de compromission suspect√©e

### 2.3 Stockage et protection

- Les mots de passe ne DOIVENT JAMAIS √™tre √©crits ou stock√©s en clair
- L'utilisation d'un gestionnaire de mots de passe approuv√© est OBLIGATOIRE
- Le partage de mots de passe est STRICTEMENT INTERDIT

## 3. Responsabilit√©s

- **Utilisateurs** : Respecter cette politique et signaler tout incident
- **RSSI** : Maintenir et faire appliquer cette politique
- **IT** : Impl√©menter les contr√¥les techniques

## 4. Non-conformit√©

Le non-respect de cette politique peut entra√Æner des sanctions disciplinaires.

## 5. R√©vision

Cette politique sera r√©vis√©e annuellement ou lors de changements majeurs.

---
*Document approuv√© par : Direction G√©n√©rale*
"""

        with open(Path(documents_directory) / "POL-SEC-001_Mots_de_passe.md", 'w', encoding='utf-8') as f:
            f.write(exemple_politique)

        print(f"\n‚úÖ Document d'exemple cr√©√© dans {documents_directory}")
        print("   Ajoutez vos propres documents et relancez le script.")
        return

    # Traiter les documents
    enriched_docs = process_security_documents(documents_directory)

    if not enriched_docs:
        print("‚ùå Aucun document trait√©. V√©rifiez votre r√©pertoire.")
        return

    # Int√©grer dans CRAG
    pipeline = integrate_with_crag_pipeline(enriched_docs)

    # D√©monstration des requ√™tes
    demo_audit_queries(pipeline)

    # G√©n√©rer un rapport
    generate_audit_report(pipeline)

    print("\n‚úÖ D√©monstration termin√©e !")
    print("\nüí° Prochaines √©tapes :")
    print("   1. Ajoutez plus de documents dans votre r√©pertoire")
    print("   2. Testez avec vos vraies questions d'audit")
    print("   3. Personnalisez les configurations selon vos besoins")
    print("   4. Int√©grez avec vos outils d'audit existants")


if __name__ == "__main__":
    main()